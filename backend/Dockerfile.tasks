# -------------------------------------------------------------------------- #
# STAGE 1: Builder
# -------------------------------------------------------------------------- #
FROM python:3.12-slim AS builder

# Install system dependencies needed for building Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    build-essential \
    libssl-dev \
    libffi-dev \
 && rm -rf /var/lib/apt/lists/*

# Set up a virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install dependencies into the virtual environment (excluding torch - we'll install CPU version separately)
RUN pip install poetry
COPY poetry.lock pyproject.toml ./
RUN poetry install --only main --no-cache --no-root

# Install CPU-only PyTorch for production (smaller image size, no CUDA bloat)
RUN pip install --no-cache-dir torch>=2.6.0 torchvision>=0.21.0 --index-url https://download.pytorch.org/whl/cpu

# -------------------------------------------------------------------------- #
# STAGE 2: Final Production Image (Tasks - Optimized)
# -------------------------------------------------------------------------- #
FROM python:3.12-slim

# Install only essential RUNTIME system dependencies for tasks
RUN sed -i 's/main/main contrib non-free/g' /etc/apt/sources.list.d/debian.sources && \
    apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-pol \
    antiword \
    odt2txt \
    unrar \
    libreoffice \
    libreoffice-writer \
 && rm -rf /var/lib/apt/lists/*

# Copy the virtual environment from the builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
WORKDIR /app
COPY . ./

# Install only Chromium for Playwright (much smaller than all browsers)
RUN playwright install chromium --with-deps

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt'); nltk.download('punkt_tab'); nltk.download('averaged_perceptron_tagger')"

# Set up runtime environment
ENV HF_HOME=/app/.cache/huggingface
ENV CUDA_VISIBLE_DEVICES=""
ENV TORCH_DEVICE=cpu
VOLUME ["/app/.cache/huggingface"]

# Create logs directory
RUN mkdir -p /app/logs && chmod -R 777 /app/logs

CMD ["python", "-m", "minerva.tasks.tasks_app"]